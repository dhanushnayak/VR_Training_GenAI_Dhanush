<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="VR.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="1"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="2340"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="employees" custom_title="0" dock_id="1" table="4,9:mainemployees"/><dock_state state="000000ff00000000fd0000000100000002000004f40000026efc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000000004f40000011e00ffffff000002580000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="departments" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="91"/><column index="2" value="111"/><column index="3" value="109"/><column index="4" value="62"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="employees" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="79"/><column index="2" value="69"/><column index="3" value="70"/><column index="4" value="202"/><column index="5" value="85"/><column index="6" value="46"/><column index="7" value="93"/><column index="8" value="77"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1*">SELECT 
    first_name,
    last_name,
    salary,
    department_id
FROM employees e1
WHERE salary = (
    SELECT MAX(salary) 
    FROM employees e2 
    WHERE e2.department_id = e1.department_id
);

SELECT 
    first_name,
    last_name,
    salary,
    (SELECT AVG(salary) FROM employees) AS avg_salary
FROM employees
WHERE salary &gt; (SELECT AVG(salary) FROM employees);


SELECT 
    first_name,
    last_name,
    salary,
    ROUND(salary * 100.0 / (SELECT SUM(salary) FROM employees), 2) AS salary_percentage
FROM employees;


SELECT 
    first_name,
    last_name,
    department_id
FROM employees
WHERE employee_id NOT IN (
    SELECT DISTINCT employee_id 
    FROM employee_projects
);


SELECT 
    department_name,
    location
FROM departments d
WHERE d.department_id IN  (
    SELECT e.department_id 
    FROM employees e 
    WHERE e.department_id = d.department_id 
    AND e.salary &gt; 80000
);


SELECT 
    first_name,
    last_name,
    salary,
    department_id,
    (
        SELECT AVG(salary) 
        FROM employees e2 
        WHERE e2.department_id = e1.department_id
    ) AS dept_avg_salary
FROM employees e1
WHERE salary &gt; (
    SELECT AVG(salary) 
    FROM employees e2 
    WHERE e2.department_id = e1.department_id
);


WITH department_stats AS (
    SELECT 
        department_id,
        COUNT(*) AS employee_count,
        AVG(salary) AS avg_salary,
        SUM(salary) AS total_payroll
    FROM employees
    GROUP BY department_id
)
SELECT 
    d.department_name,
    ds.employee_count,
    ROUND(ds.avg_salary, 2) AS avg_salary,
    ds.total_payroll
FROM department_stats ds
JOIN departments d ON ds.department_id = d.department_id
ORDER BY ds.avg_salary DESC;


WITH 
high_earners AS (
    SELECT employee_id, first_name, last_name, salary
    FROM employees
    WHERE salary &gt; 75000
),
project_assignments AS (
    SELECT 
        employee_id,
        COUNT(*) AS project_count,
        SUM(hours_allocated) AS total_hours
    FROM employee_projects
    GROUP BY employee_id
)
SELECT 
    he.first_name,
    he.last_name,
    he.salary,
    COALESCE(pa.project_count, 0) AS project_count,
    COALESCE(pa.total_hours, 0) AS total_hours
FROM high_earners he
LEFT JOIN project_assignments pa ON he.employee_id = pa.employee_id;




SELECT 
        first_name,
        last_name,
        salary,
        department_id,
        ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary DESC) AS salary_rank
    FROM employees;
	
WITH department_stats AS (
    SELECT 
        department_id,
        COUNT(*) AS employee_count,
        AVG(salary) AS avg_salary,
        SUM(salary) AS total_payroll
    FROM employees
    GROUP BY department_id
)
SELECT 
    d.department_name,
    ds.employee_count,
    ROUND(ds.avg_salary, 2) AS avg_salary,
    ds.total_payroll
FROM department_stats ds
JOIN departments d ON ds.department_id = d.department_id
ORDER BY ds.avg_salary DESC;

-- Multiple CTEs
WITH 
high_earners AS (
    SELECT employee_id, first_name, last_name, salary
    FROM employees
    WHERE salary &gt; 75000
),
project_assignments AS (
    SELECT 
        employee_id,
        COUNT(*) AS project_count,
        SUM(hours_allocated) AS total_hours
    FROM employee_projects
    GROUP BY employee_id
)
SELECT 
    he.first_name,
    he.last_name,
    he.salary,
    COALESCE(pa.project_count, 0) AS project_count,
    COALESCE(pa.total_hours, 0) AS total_hours
FROM high_earners he
LEFT JOIN project_assignments pa ON he.employee_id = pa.employee_id;

-- CTE with window functions
WITH ranked_employees AS (
    SELECT 
        first_name,
        last_name,
        salary,
        department_id,
        ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary DESC) AS salary_rank
    FROM employees
)
SELECT 
    first_name,
    last_name,
    salary,
    department_id,
    salary_rank
FROM ranked_employees
WHERE salary_rank &lt;= 2;  -- Top 2 earners per department

-- =====================================================
-- Recursive CTEs
-- =====================================================

-- Recursive CTE to build organizational hierarchy
WITH RECURSIVE employee_hierarchy AS (
    -- Base case: employees with no manager (top level)
    SELECT 
        employee_id,
        first_name,
        last_name,
        manager_id,
        0 AS level,
        first_name || ' ' || last_name AS hierarchy_path
    FROM employees
    WHERE manager_id IS NULL
    
    UNION ALL
    
    -- Recursive case: employees with managers
    SELECT 
        e.employee_id,
        e.first_name,
        e.last_name,
        e.manager_id,
        eh.level + 1,
        eh.hierarchy_path || ' -&gt; ' || e.first_name || ' ' || e.last_name
    FROM employees e
    JOIN employee_hierarchy eh ON e.manager_id = eh.employee_id
)
SELECT 
    employee_id,
    first_name,
    last_name,
    level,
    hierarchy_path
FROM employee_hierarchy
ORDER BY level, last_name;
	
</sql><sql name="SQL 2*">SELECT 
    id,
    full_name AS original_name,
    TRIM(full_name) AS cleaned_name,
    LENGTH(full_name) AS original_length,
    LENGTH(TRIM(full_name)) AS cleaned_length
FROM messy_customer_data;</sql><current_tab id="1"/></tab_sql></sqlb_project>
